"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./node_modules/@web3-react/metamask/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@web3-react/metamask/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MetaMask = exports.NoMetaMaskError = void 0;\nconst types_1 = __webpack_require__(/*! @web3-react/types */ \"./node_modules/@web3-react/types/dist/index.js\");\nclass NoMetaMaskError extends Error {\n    constructor() {\n        super('MetaMask not installed');\n        this.name = NoMetaMaskError.name;\n        Object.setPrototypeOf(this, NoMetaMaskError.prototype);\n    }\n}\nexports.NoMetaMaskError = NoMetaMaskError;\nfunction parseChainId(chainId) {\n    return Number.parseInt(chainId, 16);\n}\nclass MetaMask extends types_1.Connector {\n    /**\n     * @param connectEagerly - A flag indicating whether connection should be initiated when the class is constructed.\n     * @param options - Options to pass to `@metamask/detect-provider`\n     */\n    constructor(actions, connectEagerly = false, options) {\n        super(actions);\n        if (connectEagerly && typeof window === 'undefined') {\n            throw new Error('connectEagerly = true is invalid for SSR, instead use the connectEagerly method in a useEffect');\n        }\n        this.options = options;\n        if (connectEagerly)\n            void this.connectEagerly();\n    }\n    isomorphicInitialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.eagerConnection)\n                return this.eagerConnection;\n            yield (this.eagerConnection = Promise.resolve().then(() => __importStar(__webpack_require__(/*! @metamask/detect-provider */ \"./node_modules/@metamask/detect-provider/dist/index.js\"))).then((m) => m.default(this.options))\n                .then((provider) => {\n                if (provider) {\n                    this.provider = provider;\n                    this.provider.on('connect', ({ chainId }) => {\n                        this.actions.update({ chainId: parseChainId(chainId) });\n                    });\n                    this.provider.on('disconnect', (error) => {\n                        this.actions.reportError(error);\n                    });\n                    this.provider.on('chainChanged', (chainId) => {\n                        this.actions.update({ chainId: parseChainId(chainId) });\n                    });\n                    this.provider.on('accountsChanged', (accounts) => {\n                        if (accounts.length === 0) {\n                            // handle this edge case by disconnecting\n                            this.actions.reportError(undefined);\n                        }\n                        else {\n                            this.actions.update({ accounts });\n                        }\n                    });\n                }\n            }));\n        });\n    }\n    /** {@inheritdoc Connector.connectEagerly} */\n    connectEagerly() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cancelActivation = this.actions.startActivation();\n            yield this.isomorphicInitialize();\n            if (!this.provider)\n                return cancelActivation();\n            return Promise.all([\n                this.provider.request({ method: 'eth_chainId' }),\n                this.provider.request({ method: 'eth_accounts' }),\n            ])\n                .then(([chainId, accounts]) => {\n                if (accounts.length) {\n                    this.actions.update({ chainId: parseChainId(chainId), accounts });\n                }\n                else {\n                    throw new Error('No accounts returned');\n                }\n            })\n                .catch((error) => {\n                console.debug('Could not connect eagerly', error);\n                cancelActivation();\n            });\n        });\n    }\n    /**\n     * Initiates a connection.\n     *\n     * @param desiredChainIdOrChainParameters - If defined, indicates the desired chain to connect to. If the user is\n     * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch\n     * to the chain, if one of two conditions is met: either they already have it added in their extension, or the\n     * argument is of type AddEthereumChainParameter, in which case the user will be prompted to add the chain with the\n     * specified parameters first, before being prompted to switch.\n     */\n    activate(desiredChainIdOrChainParameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.actions.startActivation();\n            yield this.isomorphicInitialize();\n            if (!this.provider)\n                return this.actions.reportError(new NoMetaMaskError());\n            return Promise.all([\n                this.provider.request({ method: 'eth_chainId' }),\n                this.provider.request({ method: 'eth_requestAccounts' }),\n            ])\n                .then(([chainId, accounts]) => {\n                const receivedChainId = parseChainId(chainId);\n                const desiredChainId = typeof desiredChainIdOrChainParameters === 'number'\n                    ? desiredChainIdOrChainParameters\n                    : desiredChainIdOrChainParameters === null || desiredChainIdOrChainParameters === void 0 ? void 0 : desiredChainIdOrChainParameters.chainId;\n                // if there's no desired chain, or it's equal to the received, update\n                if (!desiredChainId || receivedChainId === desiredChainId)\n                    return this.actions.update({ chainId: receivedChainId, accounts });\n                const desiredChainIdHex = `0x${desiredChainId.toString(16)}`;\n                // if we're here, we can try to switch networks\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return this.provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: desiredChainIdHex }],\n                })\n                    .catch((error) => {\n                    if (error.code === 4902 && typeof desiredChainIdOrChainParameters !== 'number') {\n                        // if we're here, we can try to add a new network\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        return this.provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [Object.assign(Object.assign({}, desiredChainIdOrChainParameters), { chainId: desiredChainIdHex })],\n                        });\n                    }\n                    else {\n                        throw error;\n                    }\n                })\n                    .then(() => this.activate(desiredChainId));\n            })\n                .catch((error) => {\n                this.actions.reportError(error);\n            });\n        });\n    }\n}\nexports.MetaMask = MetaMask;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3-react/metamask/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@web3-react/types/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@web3-react/types/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Connector = void 0;\nclass Connector {\n    /**\n     * @param actions - Methods bound to a zustand store that tracks the state of the connector.\n     * Actions are used by the connector to report changes in connection status.\n     */\n    constructor(actions) {\n        this.actions = actions;\n    }\n    /**\n     * Initiate a disconnect.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    deactivate(...args) {\n        this.actions.reportError(undefined);\n    }\n}\nexports.Connector = Connector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjMtcmVhY3QvdHlwZXMvZGlzdC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzLXJlYWN0L3R5cGVzL2Rpc3QvaW5kZXguanM/NGFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29ubmVjdG9yID0gdm9pZCAwO1xuY2xhc3MgQ29ubmVjdG9yIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYWN0aW9ucyAtIE1ldGhvZHMgYm91bmQgdG8gYSB6dXN0YW5kIHN0b3JlIHRoYXQgdHJhY2tzIHRoZSBzdGF0ZSBvZiB0aGUgY29ubmVjdG9yLlxuICAgICAqIEFjdGlvbnMgYXJlIHVzZWQgYnkgdGhlIGNvbm5lY3RvciB0byByZXBvcnQgY2hhbmdlcyBpbiBjb25uZWN0aW9uIHN0YXR1cy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhY3Rpb25zKSB7XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYXRlIGEgZGlzY29ubmVjdC5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgZGVhY3RpdmF0ZSguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuYWN0aW9ucy5yZXBvcnRFcnJvcih1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdG9yID0gQ29ubmVjdG9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3-react/types/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@web3-react/walletconnect/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@web3-react/walletconnect/dist/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WalletConnect = exports.URI_AVAILABLE = void 0;\nconst types_1 = __webpack_require__(/*! @web3-react/types */ \"./node_modules/@web3-react/types/dist/index.js\");\nconst eventemitter3_1 = __importDefault(__webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@web3-react/walletconnect/dist/utils.js\");\nexports.URI_AVAILABLE = 'URI_AVAILABLE';\nfunction parseChainId(chainId) {\n    return typeof chainId === 'string' ? Number.parseInt(chainId) : chainId;\n}\nclass WalletConnect extends types_1.Connector {\n    /**\n     * @param options - Options to pass to `@walletconnect/ethereum-provider`\n     * @param connectEagerly - A flag indicating whether connection should be initiated when the class is constructed.\n     */\n    constructor(actions, options, connectEagerly = false, treatModalCloseAsError = true) {\n        super(actions);\n        this.events = new eventemitter3_1.default();\n        this.disconnectListener = (error) => {\n            this.actions.reportError(error);\n        };\n        this.chainChangedListener = (chainId) => {\n            this.actions.update({ chainId: parseChainId(chainId) });\n        };\n        this.accountsChangedListener = (accounts) => {\n            this.actions.update({ accounts });\n        };\n        this.URIListener = (_, payload) => {\n            this.events.emit(exports.URI_AVAILABLE, payload.params[0]);\n        };\n        if (connectEagerly && typeof window === 'undefined') {\n            throw new Error('connectEagerly = true is invalid for SSR, instead use the connectEagerly method in a useEffect');\n        }\n        const { rpc } = options, rest = __rest(options, [\"rpc\"]);\n        this.rpc = Object.keys(rpc).reduce((accumulator, chainId) => {\n            const value = rpc[Number(chainId)];\n            accumulator[Number(chainId)] = Array.isArray(value) ? value : [value];\n            return accumulator;\n        }, {});\n        this.options = rest;\n        this.treatModalCloseAsError = treatModalCloseAsError;\n        if (connectEagerly)\n            void this.connectEagerly();\n    }\n    isomorphicInitialize(chainId = Number(Object.keys(this.rpc)[0])) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.eagerConnection)\n                return this.eagerConnection;\n            // because we can only use 1 url per chainId, we need to decide between multiple, where necessary\n            const rpc = Promise.all(Object.keys(this.rpc).map((chainId) => __awaiter(this, void 0, void 0, function* () { return [Number(chainId), yield (0, utils_1.getBestUrl)(this.rpc[Number(chainId)])]; }))).then((results) => results.reduce((accumulator, [chainId, url]) => {\n                accumulator[chainId] = url;\n                return accumulator;\n            }, {}));\n            yield (this.eagerConnection = Promise.resolve().then(() => __importStar(__webpack_require__(/*! @walletconnect/ethereum-provider */ \"./node_modules/@walletconnect/ethereum-provider/dist/esm/index.js\"))).then((m) => __awaiter(this, void 0, void 0, function* () {\n                this.provider = new m.default(Object.assign(Object.assign({}, this.options), { chainId, rpc: yield rpc }));\n                this.provider.on('disconnect', this.disconnectListener);\n                this.provider.on('chainChanged', this.chainChangedListener);\n                this.provider.on('accountsChanged', this.accountsChangedListener);\n                this.provider.connector.on('display_uri', this.URIListener);\n            })));\n        });\n    }\n    /** {@inheritdoc Connector.connectEagerly} */\n    connectEagerly() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cancelActivation = this.actions.startActivation();\n            yield this.isomorphicInitialize();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (this.provider.connected) {\n                try {\n                    // for walletconnect, we always use sequential instead of parallel fetches because otherwise\n                    // chainId defaults to 1 even if the connecting wallet isn't on mainnet\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const accounts = yield this.provider.request({ method: 'eth_accounts' });\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const chainId = parseChainId(yield this.provider.request({ method: 'eth_chainId' }));\n                    if (accounts.length) {\n                        this.actions.update({ chainId, accounts });\n                    }\n                    else {\n                        throw new Error('No accounts returned');\n                    }\n                }\n                catch (error) {\n                    console.debug('Could not connect eagerly', error);\n                    cancelActivation();\n                }\n            }\n            else {\n                cancelActivation();\n            }\n        });\n    }\n    /**\n     * Initiates a connection.\n     *\n     * @param desiredChainId - If defined, indicates the desired chain to connect to. If the user is\n     * already connected to this chain, no additional steps will be taken. Otherwise, the user will be prompted to switch\n     * to the chain, if their wallet supports it.\n     */\n    activate(desiredChainId) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (desiredChainId && this.rpc[desiredChainId] === undefined) {\n                throw new Error(`no url(s) provided for desiredChainId ${desiredChainId}`);\n            }\n            // this early return clause catches some common cases if we're already connected\n            if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.connected) {\n                if (!desiredChainId || desiredChainId === this.provider.chainId)\n                    return;\n                const desiredChainIdHex = `0x${desiredChainId.toString(16)}`;\n                return this.provider\n                    .request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: desiredChainIdHex }],\n                })\n                    .catch(() => void 0);\n            }\n            this.actions.startActivation();\n            // if we're trying to connect to a specific chain that we're not already initialized for, we have to re-initialize\n            if (desiredChainId && desiredChainId !== ((_b = this.provider) === null || _b === void 0 ? void 0 : _b.chainId))\n                yield this.deactivate();\n            yield this.isomorphicInitialize(desiredChainId);\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const accounts = yield this.provider.request({ method: 'eth_requestAccounts' });\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const chainId = parseChainId(yield this.provider.request({ method: 'eth_chainId' }));\n                if (!desiredChainId || desiredChainId === chainId) {\n                    return this.actions.update({ chainId, accounts });\n                }\n                // because e.g. metamask doesn't support wallet_switchEthereumChain, we have to report connections,\n                // even if the chainId isn't necessarily the desired one. this is ok because in e.g. rainbow,\n                // we won't report a connection to the wrong chain while the switch is pending because of the re-initialization\n                // logic above, which ensures first-time connections are to the correct chain in the first place\n                this.actions.update({ chainId, accounts });\n                // if we're here, we can try to switch networks, ignoring errors\n                const desiredChainIdHex = `0x${desiredChainId.toString(16)}`;\n                return (_c = this.provider) === null || _c === void 0 ? void 0 : _c.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: desiredChainIdHex }],\n                }).catch(() => void 0);\n            }\n            catch (error) {\n                // this condition is a bit of a hack :/\n                // if a user triggers the walletconnect modal, closes it, and then tries to connect again,\n                // the modal will not trigger. the logic below prevents this from happening\n                if (error.message === 'User closed modal') {\n                    yield this.deactivate(this.treatModalCloseAsError ? error : undefined);\n                }\n                else {\n                    this.actions.reportError(error);\n                }\n            }\n        });\n    }\n    /** {@inheritdoc Connector.deactivate} */\n    deactivate(error) {\n        var _a, _b, _c, _d, _e, _f;\n        return __awaiter(this, void 0, void 0, function* () {\n            (_a = this.provider) === null || _a === void 0 ? void 0 : _a.off('disconnect', this.disconnectListener);\n            (_b = this.provider) === null || _b === void 0 ? void 0 : _b.off('chainChanged', this.chainChangedListener);\n            (_c = this.provider) === null || _c === void 0 ? void 0 : _c.off('accountsChanged', this.accountsChangedListener);\n            (_e = (_d = this.provider) === null || _d === void 0 ? void 0 : _d.connector) === null || _e === void 0 ? void 0 : _e.off('display_uri', this.URIListener);\n            yield ((_f = this.provider) === null || _f === void 0 ? void 0 : _f.disconnect());\n            this.provider = undefined;\n            this.eagerConnection = undefined;\n            this.actions.reportError(error);\n        });\n    }\n}\nexports.WalletConnect = WalletConnect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3-react/walletconnect/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@web3-react/walletconnect/dist/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@web3-react/walletconnect/dist/utils.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getBestUrl = void 0;\nfunction getBestUrl(urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // if we only have 1 url, it's the best!\n        if (urls.length === 1)\n            return urls[0];\n        const [HttpConnection, JsonRpcProvider] = yield Promise.all([\n            Promise.resolve().then(() => __importStar(__webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js\"))).then(({ HttpConnection }) => HttpConnection),\n            Promise.resolve().then(() => __importStar(__webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\"))).then(({ JsonRpcProvider }) => JsonRpcProvider),\n        ]);\n        // the below returns the first url for which there's been a successful call, prioritized by index\n        return new Promise((resolve) => {\n            let resolved = false;\n            const successes = {};\n            urls.forEach((url, i) => {\n                const http = new JsonRpcProvider(new HttpConnection(url));\n                void http\n                    .request({ method: 'eth_chainId' })\n                    .then(() => true)\n                    .catch(() => false)\n                    .then((success) => {\n                    // if we already resolved, return\n                    if (resolved)\n                        return;\n                    // store the result of the call\n                    successes[i] = success;\n                    // if this is the last call and we haven't resolved yet - do so\n                    if (Object.keys(successes).length === urls.length) {\n                        const index = Object.keys(successes).findIndex((j) => successes[Number(j)]);\n                        // no need to set resolved to true, as this is the last promise\n                        return resolve(urls[index === -1 ? 0 : index]);\n                    }\n                    // otherwise, for each prospective index, check if we can resolve\n                    new Array(urls.length).fill(0).forEach((_, prospectiveIndex) => {\n                        // to resolve, we need to:\n                        // a) have successfully made a call\n                        // b) not be waiting on any other higher-index calls\n                        if (successes[prospectiveIndex] &&\n                            new Array(prospectiveIndex).fill(0).every((_, j) => successes[j] === false)) {\n                            resolved = true;\n                            resolve(urls[prospectiveIndex]);\n                        }\n                    });\n                });\n            });\n        });\n    });\n}\nexports.getBestUrl = getBestUrl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjMtcmVhY3Qvd2FsbGV0Y29ubmVjdC9kaXN0L3V0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsbUJBQU8sQ0FBQyx1SEFBd0MsWUFBWSxnQkFBZ0I7QUFDbEksc0RBQXNELG1CQUFPLENBQUMseUdBQWlDLFlBQVksaUJBQWlCO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsdUJBQXVCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzLXJlYWN0L3dhbGxldGNvbm5lY3QvZGlzdC91dGlscy5qcz84ZWY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QmVzdFVybCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldEJlc3RVcmwodXJscykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIC8vIGlmIHdlIG9ubHkgaGF2ZSAxIHVybCwgaXQncyB0aGUgYmVzdCFcbiAgICAgICAgaWYgKHVybHMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHVybHNbMF07XG4gICAgICAgIGNvbnN0IFtIdHRwQ29ubmVjdGlvbiwgSnNvblJwY1Byb3ZpZGVyXSA9IHlpZWxkIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX19pbXBvcnRTdGFyKHJlcXVpcmUoJ0B3YWxsZXRjb25uZWN0L2pzb25ycGMtaHR0cC1jb25uZWN0aW9uJykpKS50aGVuKCh7IEh0dHBDb25uZWN0aW9uIH0pID0+IEh0dHBDb25uZWN0aW9uKSxcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX19pbXBvcnRTdGFyKHJlcXVpcmUoJ0B3YWxsZXRjb25uZWN0L2pzb25ycGMtcHJvdmlkZXInKSkpLnRoZW4oKHsgSnNvblJwY1Byb3ZpZGVyIH0pID0+IEpzb25ScGNQcm92aWRlciksXG4gICAgICAgIF0pO1xuICAgICAgICAvLyB0aGUgYmVsb3cgcmV0dXJucyB0aGUgZmlyc3QgdXJsIGZvciB3aGljaCB0aGVyZSdzIGJlZW4gYSBzdWNjZXNzZnVsIGNhbGwsIHByaW9yaXRpemVkIGJ5IGluZGV4XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzZXMgPSB7fTtcbiAgICAgICAgICAgIHVybHMuZm9yRWFjaCgodXJsLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cCA9IG5ldyBKc29uUnBjUHJvdmlkZXIobmV3IEh0dHBDb25uZWN0aW9uKHVybCkpO1xuICAgICAgICAgICAgICAgIHZvaWQgaHR0cFxuICAgICAgICAgICAgICAgICAgICAucmVxdWVzdCh7IG1ldGhvZDogJ2V0aF9jaGFpbklkJyB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGFscmVhZHkgcmVzb2x2ZWQsIHJldHVyblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIHRoZSByZXN1bHQgb2YgdGhlIGNhbGxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2VzW2ldID0gc3VjY2VzcztcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgbGFzdCBjYWxsIGFuZCB3ZSBoYXZlbid0IHJlc29sdmVkIHlldCAtIGRvIHNvXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzdWNjZXNzZXMpLmxlbmd0aCA9PT0gdXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gT2JqZWN0LmtleXMoc3VjY2Vzc2VzKS5maW5kSW5kZXgoKGopID0+IHN1Y2Nlc3Nlc1tOdW1iZXIoaildKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gc2V0IHJlc29sdmVkIHRvIHRydWUsIGFzIHRoaXMgaXMgdGhlIGxhc3QgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodXJsc1tpbmRleCA9PT0gLTEgPyAwIDogaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UsIGZvciBlYWNoIHByb3NwZWN0aXZlIGluZGV4LCBjaGVjayBpZiB3ZSBjYW4gcmVzb2x2ZVxuICAgICAgICAgICAgICAgICAgICBuZXcgQXJyYXkodXJscy5sZW5ndGgpLmZpbGwoMCkuZm9yRWFjaCgoXywgcHJvc3BlY3RpdmVJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gcmVzb2x2ZSwgd2UgbmVlZCB0bzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEpIGhhdmUgc3VjY2Vzc2Z1bGx5IG1hZGUgYSBjYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiKSBub3QgYmUgd2FpdGluZyBvbiBhbnkgb3RoZXIgaGlnaGVyLWluZGV4IGNhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc2VzW3Byb3NwZWN0aXZlSW5kZXhdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEFycmF5KHByb3NwZWN0aXZlSW5kZXgpLmZpbGwoMCkuZXZlcnkoKF8sIGopID0+IHN1Y2Nlc3Nlc1tqXSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodXJsc1twcm9zcGVjdGl2ZUluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRCZXN0VXJsID0gZ2V0QmVzdFVybDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3-react/walletconnect/dist/utils.js\n");

/***/ })

});